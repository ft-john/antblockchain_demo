"use strict";var CryptoJS=require("crypto-js"),MD5=require("md5.js"),Buffer=require("safe-buffer").Buffer;function PEM(e,t,r){this.tag=t,Buffer.isBuffer(e)?this.encode(e,t,r):e&&(e=e.toString("ascii").trim(),this.decode(e,r))}module.exports=exports=function(e,t,r){return new PEM(e,t,r)},(exports.PEM=PEM).prototype.toString=function(){return this.pem},PEM.prototype.toBuffer=function(){return this.buf},PEM.prototype.decode=function(e,t){e&&(this.pem=e.toString("ascii").trim());var r,o=this.pem.split(/\r?\n/),i=o[0].match(/\-\-\-\-\-\s*BEGIN ?([^-]+)?\-\-\-\-\-/);if(!i)throw new Error("parse PEM: BEGIN not found");if(this.tag=i[1],o.shift(),"Proc-Type: 4,ENCRYPTED"===o[0]){if("string"!=typeof t)throw new Error("PEM is encrypted but no passphrase given");r=o[1].match(/DEK-Info: ([^,]+),([0-9A-F]+)/i),o.splice(0,3);var s=r[1].toLowerCase(),n=Buffer(r[2],"hex"),p=passphraseToKey(s.toUpperCase(),t,n);o.pop();var a=o.join("").toString("hex"),f=CryptoJS.enc.Hex.parse(p.toString("hex")),u=CryptoJS.AES.decrypt(a,f,{iv:CryptoJS.enc.Hex.parse(n.toString("hex")),padding:CryptoJS.pad.NoPadding,mode:CryptoJS.mode.CBC});r&&(this.buf=Buffer(u.toString(CryptoJS.enc.Hex),"hex"))}return this.pem="-----BEGIN"+(this.tag?" "+this.tag:"")+"-----\n"+Buffer(this.buf).toString("base64").match(/.{1,64}/g).join("\n")+"\n-----END"+(this.tag?" "+this.tag:"")+"-----",this.pem};var keyBytes={"DES-EDE3-CBC":24,"DES-CBC":8,"AES-128-CBC":16,"AES-192-CBC":24,"AES-256-CBC":32};function passphraseToKey(e,t,r){var o=keyBytes[e];if(!o){var i=Object.keys(keyBytes);throw new TypeError("Unsupported type. Allowed: "+i)}var s=r.length;8!==r.length&&(r=r.slice(0,8));for(var n,p=!1,a=new Buffer(o),f=0;;){var u=new MD5;p?u.update(n):p=!0,u.update(t),u.update(r),n=u.digest();for(var h=0;o&&h<16;)a[f++]=n[h],o--,h++;var y=Math.min(s,16-h);if(s-=y,h+=y,0==o&&0==s)break}return a}